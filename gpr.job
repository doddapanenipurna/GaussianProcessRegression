#BSUB -n 20 -R 'select[nxt] rusage[mem=150] span[ptile=20]' -M 150
#BSUB -J inverse -o output.%J -L /bin/bash -W 1:00
##
##NECESSARY JOB SPECIFICATIONS
##BSUB -J JobName             # Set the job name to "JobName"
##BSUB -L /bin/bash           # Uses the bash login shell to initialize the job's execution environment.
##BSUB -W hh:mm               # Sets job's runtime wall-clock limit in hours:minutes or just minutes (-mm)
##BSUB -n NNN                 # NNN: total number of cores/jobslots to allocate for the job
##BSUB -R "select[node-type]" # Select node-type: nxt, mem256gb, gpu, phi, mem1t, mem2t ...
##BSUB -R "span[ptile=XX]"    # XX:  number of cores/jobslots per node to use. Also, a node selection criterion.
##BSUB -R "rusage[mem=nnn]"   # Reserves nnn MBs per process/CPU for the job
##BSUB -M mm                  # Sets the per process enforceable memory limit to nnn MB
##BSUB -o OUTPUTFILE.%J       # Send stdout and stderr to "OUTPUTFILE.[jobID]"
#
# <--- at this point the current working directory is the one you submitted the job from.
#
module load intel/2017A       # load Intel software stack 
#
echo "Processes = 1"
export OMP_NUM_THREADS=1
./gpr 20
##
echo "Processes = 2"
export OMP_NUM_THREADS=2
./gpr 20

echo "Processes = 3"
export OMP_NUM_THREADS=3
./gpr 20

echo "Processes = 4"
export OMP_NUM_THREADS=4
./gpr 20

echo "Processes = 5"
export OMP_NUM_THREADS=5
./gpr 20

echo "Processes = 10"
export OMP_NUM_THREADS=10
./gpr 20

echo "Processes = 15"
export OMP_NUM_THREADS=15
./gpr 20
##echo "Processes = 3"
##mpirun -np 3 ./gpr 16

##echo "Processes = 4"
#mpirun -np 4 ./gpr 16

#echo "Processes = 5"
#mpirun -np 5 ./gpr 16


#echo "Processes = 10"
#mpirun -np 10 ./gpr 16
#echo "Processes = 15"
#mpirun -np 15 ./gpr 16
export OMP_NUM_THREADS=20
echo "Processes = 20"
./gpr 20
